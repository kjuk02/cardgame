#include <iostream>
#include <fstream>
using namespace std;
 
int top;
 
typedef struct{
short int row;
short int col;
short int dir;
}element;
 
void create_stack(), push(int, int, int);
element pop();
void maze_make(ifstream&, int maze[][6]);
void found_maze(int maze[][6]);
 
element stack[36];
 
typedef struct{
  short int vert;
  short int horiz;
}offsets;
 
int main(void)
{
  ifstream inStream;
  inStream.open("maze.txt");
  int maze[6][6]={0, };
  maze_make(inStream, maze);
  found_maze(maze);
  return 0;
}
 
void create_stack()
{
  top = -1;
}
 
void push(int row, int col, int dir)
{
  ++top;
  stack[top].row = row;
  stack[top].col = col;
  stack[top].dir = dir;
}
 
element pop()
{
  return (stack[top--]);
}
 
void maze_make(ifstream&inStream, int maze[][6])
{
  for(int i=0; i<6; i++)
    for(int j=0; j<6; j++)
      inStream >> maze[i][j];
}
 
void found_maze(int maze[][6])
{
  int mark[6][6]={1, };
  int found=0, row, col, dir, next_row, next_col, next_dir;
 
  offsets move[8] ={ {-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1} };//N, NE, E, SE, S, SW, W, NW
  element temp;
  create_stack();
  push(0,0,2);
 
  while(top!=-1 && !found)
  {
    temp = pop();
    row = temp.row;
    col = temp.col;
    dir = temp.dir;
 
    while(dir<8 && !found)
    {
      next_row = row + move[dir].vert;
      next_col = col + move[dir].horiz;
 
      if(next_row == 5 && next_col == 5)
      {
        push(row, col, dir);
        push(next_row, next_col, dir);
        mark[next_row][next_col]=1;
        found = 1;
      }
      else if (!maze[next_row][next_col] && !mark[next_row][next_col])
      {
        mark[next_row][next_col]=1;
        temp.row = row;
        temp.col=col;
        temp.dir=++dir;
        push(temp.row, temp.col, temp.dir);
        row = next_row;
        col = next_col;
        dir = 0;
      }
      else
        dir++;
    }
  }
  cout << "Path" << endl << "---------" << endl;
  for(int i=0; i<=top; i++)
    cout << stack[i].row << " " << stack[i].col <<endl;
 
  cout << endl <<"Mark" << endl << "----------------------" << endl;
  for(int i=0; i<6; i++)
  {
    for(int j=0; j<6; j++)
      cout << mark[i][j] << " ";
    cout << endl;
  }
}