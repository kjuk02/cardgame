#include <iostream>

using namespace std;

//노드의 개수 : 7 -> 계속 이 숫자를 입력해야 하므로 처음에 지정
#define NODES 7
//최대값 : 100 -> 계속 이 숫자를 입력해야 하므로 처음에 지정
#define MAX 100

int dist[NODES];
bool found[NODES];

//주어진 비용 인접 행렬
int cost[NODES][NODES] = {
	{ MAX, 2, 4, 5, MAX, MAX, MAX },
	{ MAX, MAX, MAX, 2, 7, MAX, MAX },
	{ MAX, MAX, MAX, 1, MAX, 4, MAX },
	{ MAX, 2, 1, MAX, 4, 3, MAX },
	{ MAX, 7, MAX, 4, 100, 1, 5 },
	{ MAX, MAX, 4, 3, 1, MAX, 7 },
	{ MAX, MAX, MAX, MAX, 7, 5, MAX }
};

/****************************************************************************************
* function : print_cost()
* description : 초기에 주어진 비용 인접 행렬을 프린트하는 함수
*****************************************************************************************/
void print_cost() {
	for (int i = 0; i < NODES; i++) {
		for (int j = 0; j < NODES; j++)
			std::cout << cost[i][j] << "\t";
		std::cout << std::endl;
	}
}

/*****************************************************************************************
* function : choose(int dist[], int n, bool found[])
* description : 경로 비용 최소값을 반환하는 함수
*****************************************************************************************/
int choose(int dist[], int node, bool found[]) {
	int min, i, minpos;
	minpos = -1; //초기화
	min = MAX; //min = MAX로 초기화
	for (i = 0; i < node; i++) {
		if (dist[i] < min && !found[i]) {
			min = dist[i];
			minpos = i;
		}
	}
	return minpos;
}

/*****************************************************************************************
* function : printDistance()
* description : dist 배열을 출력하는 함수
*****************************************************************************************/
void printDistance() {
	cout << "Dist: ";
	for (int i = 0; i < NODES; i++)
		cout << dist[i] << " ";
	cout << endl;
}

/*****************************************************************************************
* function : void Shortestpath(int v, int cost[NODES][NODES], int dist[], int n, bool found[])
* description : 현재 정점에서 첫번째 정점까지의 최소 거리를 구하는 함수
*****************************************************************************************/
void Shortestpath(int v, int cost[NODES][NODES], int dist[],
	int node, bool found[]) {
	int i, u, w;
	//found[]배열을 0으로 초기화하고 비용인접행렬을 한 줄씩 불러옴
	for (i = 0; i < node; i++) {
		found[i] = false;
		dist[i] = cost[v][i];
	}

	//시작하는 정점 표시
	found[v] = true;
	//0번째 정점에서 시작
	dist[v] = 0;
	for (i = 0; i < node - 1; i++) {
		//최소 비용노드 찾기
		u = choose(dist, node, found);
		//찾은 노드에 표시하기
		found[u] = true;
		for (w = 0; w < node; w++) {
			//만약 표시되어 있지 않다면
			if (!found[w]) {
				//만약 이전의 값보다 경로의 비용이 적다면
				if (dist[u] + cost[u][w] < dist[w])
					//그 비용을 dist[]에 저장
					dist[w] = dist[u] + cost[u][w];
			}
		}
		//dist 출력
		printDistance();
	}
}


int main() {
	cout << "Adjacency Matrix" << endl;
	print_cost();
	cout << "\nShortest path distance" << endl;
	Shortestpath(0, cost, dist, NODES, found);
}
